/*
 * This file is generated by jOOQ.
 */
package org.example.tables;


import java.util.UUID;
import java.util.function.Function;

import org.example.Public;
import org.example.tables.records.GetCustomerByNamesRecord;
import org.jooq.Field;
import org.jooq.Function3;
import org.jooq.Name;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class GetCustomerByNames extends TableImpl<GetCustomerByNamesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.get_customer_by_names</code>
     */
    public static final GetCustomerByNames GET_CUSTOMER_BY_NAMES = new GetCustomerByNames();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GetCustomerByNamesRecord> getRecordType() {
        return GetCustomerByNamesRecord.class;
    }

    /**
     * The column <code>public.get_customer_by_names.id</code>.
     */
    public final TableField<GetCustomerByNamesRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.get_customer_by_names.first_name</code>.
     */
    public final TableField<GetCustomerByNamesRecord, String> FIRST_NAME = createField(DSL.name("first_name"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.get_customer_by_names.last_name</code>.
     */
    public final TableField<GetCustomerByNamesRecord, String> LAST_NAME = createField(DSL.name("last_name"), SQLDataType.CLOB, this, "");

    private GetCustomerByNames(Name alias, Table<GetCustomerByNamesRecord> aliased) {
        this(alias, aliased, new Field[] {
            DSL.val(null, SQLDataType.CLOB.defaultValue(DSL.field("NULL::text", SQLDataType.CLOB))),
            DSL.val(null, SQLDataType.CLOB.defaultValue(DSL.field("NULL::text", SQLDataType.CLOB)))
        });
    }

    private GetCustomerByNames(Name alias, Table<GetCustomerByNamesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.function());
    }

    /**
     * Create an aliased <code>public.get_customer_by_names</code> table
     * reference
     */
    public GetCustomerByNames(String alias) {
        this(DSL.name(alias), GET_CUSTOMER_BY_NAMES);
    }

    /**
     * Create an aliased <code>public.get_customer_by_names</code> table
     * reference
     */
    public GetCustomerByNames(Name alias) {
        this(alias, GET_CUSTOMER_BY_NAMES);
    }

    /**
     * Create a <code>public.get_customer_by_names</code> table reference
     */
    public GetCustomerByNames() {
        this(DSL.name("get_customer_by_names"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public GetCustomerByNames as(String alias) {
        return new GetCustomerByNames(DSL.name(alias), this, parameters);
    }

    @Override
    public GetCustomerByNames as(Name alias) {
        return new GetCustomerByNames(alias, this, parameters);
    }

    @Override
    public GetCustomerByNames as(Table<?> alias) {
        return new GetCustomerByNames(alias.getQualifiedName(), this, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public GetCustomerByNames rename(String name) {
        return new GetCustomerByNames(DSL.name(name), null, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public GetCustomerByNames rename(Name name) {
        return new GetCustomerByNames(name, null, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public GetCustomerByNames rename(Table<?> name) {
        return new GetCustomerByNames(name.getQualifiedName(), null, parameters);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<UUID, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Call this table-valued function
     */
    public GetCustomerByNames call(
          String firstName
        , String lastName
    ) {
        GetCustomerByNames result = new GetCustomerByNames(DSL.name("get_customer_by_names"), null, new Field[] {
            DSL.val(firstName, SQLDataType.CLOB.defaultValue(DSL.field("NULL::text", SQLDataType.CLOB))),
            DSL.val(lastName, SQLDataType.CLOB.defaultValue(DSL.field("NULL::text", SQLDataType.CLOB)))
        });

        return aliased() ? result.as(getUnqualifiedName()) : result;
    }

    /**
     * Call this table-valued function
     */
    public GetCustomerByNames call(
          Field<String> firstName
        , Field<String> lastName
    ) {
        GetCustomerByNames result = new GetCustomerByNames(DSL.name("get_customer_by_names"), null, new Field[] {
            firstName,
            lastName
        });

        return aliased() ? result.as(getUnqualifiedName()) : result;
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super UUID, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super UUID, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
