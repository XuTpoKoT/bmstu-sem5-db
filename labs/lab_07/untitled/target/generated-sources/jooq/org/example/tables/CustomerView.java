/*
 * This file is generated by jOOQ.
 */
package org.example.tables;


import java.time.LocalDate;
import java.util.UUID;
import java.util.function.Function;

import org.example.Public;
import org.example.tables.records.CustomerViewRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function6;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CustomerView extends TableImpl<CustomerViewRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.customer_view</code>
     */
    public static final CustomerView CUSTOMER_VIEW = new CustomerView();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CustomerViewRecord> getRecordType() {
        return CustomerViewRecord.class;
    }

    /**
     * The column <code>public.customer_view.id</code>.
     */
    public final TableField<CustomerViewRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.customer_view.first_name</code>.
     */
    public final TableField<CustomerViewRecord, String> FIRST_NAME = createField(DSL.name("first_name"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.customer_view.last_name</code>.
     */
    public final TableField<CustomerViewRecord, String> LAST_NAME = createField(DSL.name("last_name"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.customer_view.birth_date</code>.
     */
    public final TableField<CustomerViewRecord, LocalDate> BIRTH_DATE = createField(DSL.name("birth_date"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>public.customer_view.email</code>.
     */
    public final TableField<CustomerViewRecord, String> EMAIL = createField(DSL.name("email"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.customer_view.phone</code>.
     */
    public final TableField<CustomerViewRecord, String> PHONE = createField(DSL.name("phone"), SQLDataType.CLOB, this, "");

    private CustomerView(Name alias, Table<CustomerViewRecord> aliased) {
        this(alias, aliased, null);
    }

    private CustomerView(Name alias, Table<CustomerViewRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("""
        create view "customer_view" as  SELECT customer.id,
         customer.first_name,
         customer.last_name,
         customer.birth_date,
         customer.email,
         customer.phone
        FROM customer;
        """));
    }

    /**
     * Create an aliased <code>public.customer_view</code> table reference
     */
    public CustomerView(String alias) {
        this(DSL.name(alias), CUSTOMER_VIEW);
    }

    /**
     * Create an aliased <code>public.customer_view</code> table reference
     */
    public CustomerView(Name alias) {
        this(alias, CUSTOMER_VIEW);
    }

    /**
     * Create a <code>public.customer_view</code> table reference
     */
    public CustomerView() {
        this(DSL.name("customer_view"), null);
    }

    public <O extends Record> CustomerView(Table<O> child, ForeignKey<O, CustomerViewRecord> key) {
        super(child, key, CUSTOMER_VIEW);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public CustomerView as(String alias) {
        return new CustomerView(DSL.name(alias), this);
    }

    @Override
    public CustomerView as(Name alias) {
        return new CustomerView(alias, this);
    }

    @Override
    public CustomerView as(Table<?> alias) {
        return new CustomerView(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public CustomerView rename(String name) {
        return new CustomerView(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CustomerView rename(Name name) {
        return new CustomerView(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public CustomerView rename(Table<?> name) {
        return new CustomerView(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<UUID, String, String, LocalDate, String, String> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function6<? super UUID, ? super String, ? super String, ? super LocalDate, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function6<? super UUID, ? super String, ? super String, ? super LocalDate, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
