/*
 * This file is generated by jOOQ.
 */
package org.example;


import org.example.tables.Category;
import org.example.tables.Customer;
import org.example.tables.Employee;
import org.example.tables.Guitarmodeltype;
import org.example.tables.Manufacturer;
import org.example.tables.Material;
import org.example.tables.OrderProductmodel;
import org.example.tables.Orders;
import org.example.tables.Orderstatus;
import org.example.tables.Productmodel;
import org.example.tables.Soundpickup;
import org.example.tables.records.CategoryRecord;
import org.example.tables.records.CustomerRecord;
import org.example.tables.records.EmployeeRecord;
import org.example.tables.records.GuitarmodeltypeRecord;
import org.example.tables.records.ManufacturerRecord;
import org.example.tables.records.MaterialRecord;
import org.example.tables.records.OrderProductmodelRecord;
import org.example.tables.records.OrdersRecord;
import org.example.tables.records.OrderstatusRecord;
import org.example.tables.records.ProductmodelRecord;
import org.example.tables.records.SoundpickupRecord;
import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * public.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<CategoryRecord> CATEGORY_PKEY = Internal.createUniqueKey(Category.CATEGORY, DSL.name("category_pkey"), new TableField[] { Category.CATEGORY.ID }, true);
    public static final UniqueKey<CustomerRecord> CUSTOMER_PKEY = Internal.createUniqueKey(Customer.CUSTOMER, DSL.name("customer_pkey"), new TableField[] { Customer.CUSTOMER.ID }, true);
    public static final UniqueKey<EmployeeRecord> EMPLOYEE_PKEY = Internal.createUniqueKey(Employee.EMPLOYEE, DSL.name("employee_pkey"), new TableField[] { Employee.EMPLOYEE.ID }, true);
    public static final UniqueKey<GuitarmodeltypeRecord> GUITARMODELTYPE_PKEY = Internal.createUniqueKey(Guitarmodeltype.GUITARMODELTYPE, DSL.name("guitarmodeltype_pkey"), new TableField[] { Guitarmodeltype.GUITARMODELTYPE.ID }, true);
    public static final UniqueKey<ManufacturerRecord> MANUFACTURER_PKEY = Internal.createUniqueKey(Manufacturer.MANUFACTURER, DSL.name("manufacturer_pkey"), new TableField[] { Manufacturer.MANUFACTURER.ID }, true);
    public static final UniqueKey<MaterialRecord> MATERIAL_PKEY = Internal.createUniqueKey(Material.MATERIAL, DSL.name("material_pkey"), new TableField[] { Material.MATERIAL.ID }, true);
    public static final UniqueKey<OrdersRecord> ORDERS_PKEY = Internal.createUniqueKey(Orders.ORDERS, DSL.name("orders_pkey"), new TableField[] { Orders.ORDERS.ID }, true);
    public static final UniqueKey<OrderstatusRecord> ORDERSTATUS_PKEY = Internal.createUniqueKey(Orderstatus.ORDERSTATUS, DSL.name("orderstatus_pkey"), new TableField[] { Orderstatus.ORDERSTATUS.ID }, true);
    public static final UniqueKey<ProductmodelRecord> PRODUCTMODEL_PKEY = Internal.createUniqueKey(Productmodel.PRODUCTMODEL, DSL.name("productmodel_pkey"), new TableField[] { Productmodel.PRODUCTMODEL.ID }, true);
    public static final UniqueKey<SoundpickupRecord> SOUNDPICKUP_PKEY = Internal.createUniqueKey(Soundpickup.SOUNDPICKUP, DSL.name("soundpickup_pkey"), new TableField[] { Soundpickup.SOUNDPICKUP.ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<OrderProductmodelRecord, OrdersRecord> ORDER_PRODUCTMODEL__ORDER_PRODUCTMODEL_ORDER_ID_FKEY = Internal.createForeignKey(OrderProductmodel.ORDER_PRODUCTMODEL, DSL.name("order_productmodel_order_id_fkey"), new TableField[] { OrderProductmodel.ORDER_PRODUCTMODEL.ORDER_ID }, Keys.ORDERS_PKEY, new TableField[] { Orders.ORDERS.ID }, true);
    public static final ForeignKey<OrderProductmodelRecord, ProductmodelRecord> ORDER_PRODUCTMODEL__ORDER_PRODUCTMODEL_PRODUCT_MODEL_ID_FKEY = Internal.createForeignKey(OrderProductmodel.ORDER_PRODUCTMODEL, DSL.name("order_productmodel_product_model_id_fkey"), new TableField[] { OrderProductmodel.ORDER_PRODUCTMODEL.PRODUCT_MODEL_ID }, Keys.PRODUCTMODEL_PKEY, new TableField[] { Productmodel.PRODUCTMODEL.ID }, true);
    public static final ForeignKey<OrdersRecord, CustomerRecord> ORDERS__ORDERS_CUSTOMER_ID_FKEY = Internal.createForeignKey(Orders.ORDERS, DSL.name("orders_customer_id_fkey"), new TableField[] { Orders.ORDERS.CUSTOMER_ID }, Keys.CUSTOMER_PKEY, new TableField[] { Customer.CUSTOMER.ID }, true);
    public static final ForeignKey<OrdersRecord, OrderstatusRecord> ORDERS__ORDERS_STATUS_FKEY = Internal.createForeignKey(Orders.ORDERS, DSL.name("orders_status_fkey"), new TableField[] { Orders.ORDERS.STATUS }, Keys.ORDERSTATUS_PKEY, new TableField[] { Orderstatus.ORDERSTATUS.ID }, true);
    public static final ForeignKey<ProductmodelRecord, MaterialRecord> PRODUCTMODEL__PRODUCTMODEL_BODY_MATERIAL_FKEY = Internal.createForeignKey(Productmodel.PRODUCTMODEL, DSL.name("productmodel_body_material_fkey"), new TableField[] { Productmodel.PRODUCTMODEL.BODY_MATERIAL }, Keys.MATERIAL_PKEY, new TableField[] { Material.MATERIAL.ID }, true);
    public static final ForeignKey<ProductmodelRecord, CategoryRecord> PRODUCTMODEL__PRODUCTMODEL_CATEGORY_ID_FKEY = Internal.createForeignKey(Productmodel.PRODUCTMODEL, DSL.name("productmodel_category_id_fkey"), new TableField[] { Productmodel.PRODUCTMODEL.CATEGORY_ID }, Keys.CATEGORY_PKEY, new TableField[] { Category.CATEGORY.ID }, true);
    public static final ForeignKey<ProductmodelRecord, ManufacturerRecord> PRODUCTMODEL__PRODUCTMODEL_MANUFACTURER_FKEY = Internal.createForeignKey(Productmodel.PRODUCTMODEL, DSL.name("productmodel_manufacturer_fkey"), new TableField[] { Productmodel.PRODUCTMODEL.MANUFACTURER }, Keys.MANUFACTURER_PKEY, new TableField[] { Manufacturer.MANUFACTURER.ID }, true);
    public static final ForeignKey<ProductmodelRecord, MaterialRecord> PRODUCTMODEL__PRODUCTMODEL_NECK_MATERIAL_FKEY = Internal.createForeignKey(Productmodel.PRODUCTMODEL, DSL.name("productmodel_neck_material_fkey"), new TableField[] { Productmodel.PRODUCTMODEL.NECK_MATERIAL }, Keys.MATERIAL_PKEY, new TableField[] { Material.MATERIAL.ID }, true);
    public static final ForeignKey<ProductmodelRecord, SoundpickupRecord> PRODUCTMODEL__PRODUCTMODEL_SOUND_PICKUP_FKEY = Internal.createForeignKey(Productmodel.PRODUCTMODEL, DSL.name("productmodel_sound_pickup_fkey"), new TableField[] { Productmodel.PRODUCTMODEL.SOUND_PICKUP }, Keys.SOUNDPICKUP_PKEY, new TableField[] { Soundpickup.SOUNDPICKUP.ID }, true);
    public static final ForeignKey<ProductmodelRecord, GuitarmodeltypeRecord> PRODUCTMODEL__PRODUCTMODEL_TYPE_FKEY = Internal.createForeignKey(Productmodel.PRODUCTMODEL, DSL.name("productmodel_type_fkey"), new TableField[] { Productmodel.PRODUCTMODEL.TYPE }, Keys.GUITARMODELTYPE_PKEY, new TableField[] { Guitarmodeltype.GUITARMODELTYPE.ID }, true);
}
