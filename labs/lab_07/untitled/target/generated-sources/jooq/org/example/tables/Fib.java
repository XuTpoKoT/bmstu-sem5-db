/*
 * This file is generated by jOOQ.
 */
package org.example.tables;


import java.util.function.Function;

import org.example.Public;
import org.example.tables.records.FibRecord;
import org.jooq.Field;
import org.jooq.Function1;
import org.jooq.Name;
import org.jooq.Records;
import org.jooq.Row1;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Fib extends TableImpl<FibRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.fib</code>
     */
    public static final Fib FIB = new Fib();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FibRecord> getRecordType() {
        return FibRecord.class;
    }

    /**
     * The column <code>public.fib.fibonacci</code>.
     */
    public final TableField<FibRecord, Integer> FIBONACCI = createField(DSL.name("fibonacci"), SQLDataType.INTEGER, this, "");

    private Fib(Name alias, Table<FibRecord> aliased) {
        this(alias, aliased, new Field[] {
            DSL.val(null, SQLDataType.INTEGER),
            DSL.val(null, SQLDataType.INTEGER),
            DSL.val(null, SQLDataType.INTEGER)
        });
    }

    private Fib(Name alias, Table<FibRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.function());
    }

    /**
     * Create an aliased <code>public.fib</code> table reference
     */
    public Fib(String alias) {
        this(DSL.name(alias), FIB);
    }

    /**
     * Create an aliased <code>public.fib</code> table reference
     */
    public Fib(Name alias) {
        this(alias, FIB);
    }

    /**
     * Create a <code>public.fib</code> table reference
     */
    public Fib() {
        this(DSL.name("fib"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Fib as(String alias) {
        return new Fib(DSL.name(alias), this, parameters);
    }

    @Override
    public Fib as(Name alias) {
        return new Fib(alias, this, parameters);
    }

    @Override
    public Fib as(Table<?> alias) {
        return new Fib(alias.getQualifiedName(), this, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public Fib rename(String name) {
        return new Fib(DSL.name(name), null, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public Fib rename(Name name) {
        return new Fib(name, null, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public Fib rename(Table<?> name) {
        return new Fib(name.getQualifiedName(), null, parameters);
    }

    // -------------------------------------------------------------------------
    // Row1 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row1<Integer> fieldsRow() {
        return (Row1) super.fieldsRow();
    }

    /**
     * Call this table-valued function
     */
    public Fib call(
          Integer first
        , Integer second
        , Integer max
    ) {
        Fib result = new Fib(DSL.name("fib"), null, new Field[] {
            DSL.val(first, SQLDataType.INTEGER),
            DSL.val(second, SQLDataType.INTEGER),
            DSL.val(max, SQLDataType.INTEGER)
        });

        return aliased() ? result.as(getUnqualifiedName()) : result;
    }

    /**
     * Call this table-valued function
     */
    public Fib call(
          Field<Integer> first
        , Field<Integer> second
        , Field<Integer> max
    ) {
        Fib result = new Fib(DSL.name("fib"), null, new Field[] {
            first,
            second,
            max
        });

        return aliased() ? result.as(getUnqualifiedName()) : result;
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function1<? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function1<? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
