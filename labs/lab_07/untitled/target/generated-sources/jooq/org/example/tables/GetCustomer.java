/*
 * This file is generated by jOOQ.
 */
package org.example.tables;


import java.util.function.Function;

import org.example.Public;
import org.example.tables.records.GetCustomerRecord;
import org.jooq.Field;
import org.jooq.Function2;
import org.jooq.Name;
import org.jooq.Records;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class GetCustomer extends TableImpl<GetCustomerRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.get_customer</code>
     */
    public static final GetCustomer GET_CUSTOMER = new GetCustomer();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GetCustomerRecord> getRecordType() {
        return GetCustomerRecord.class;
    }

    /**
     * The column <code>public.get_customer.first_name</code>.
     */
    public final TableField<GetCustomerRecord, String> FIRST_NAME = createField(DSL.name("first_name"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.get_customer.last_name</code>.
     */
    public final TableField<GetCustomerRecord, String> LAST_NAME = createField(DSL.name("last_name"), SQLDataType.CLOB, this, "");

    private GetCustomer(Name alias, Table<GetCustomerRecord> aliased) {
        this(alias, aliased, new Field[] {
            DSL.val(null, SQLDataType.CLOB)
        });
    }

    private GetCustomer(Name alias, Table<GetCustomerRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.function());
    }

    /**
     * Create an aliased <code>public.get_customer</code> table reference
     */
    public GetCustomer(String alias) {
        this(DSL.name(alias), GET_CUSTOMER);
    }

    /**
     * Create an aliased <code>public.get_customer</code> table reference
     */
    public GetCustomer(Name alias) {
        this(alias, GET_CUSTOMER);
    }

    /**
     * Create a <code>public.get_customer</code> table reference
     */
    public GetCustomer() {
        this(DSL.name("get_customer"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public GetCustomer as(String alias) {
        return new GetCustomer(DSL.name(alias), this, parameters);
    }

    @Override
    public GetCustomer as(Name alias) {
        return new GetCustomer(alias, this, parameters);
    }

    @Override
    public GetCustomer as(Table<?> alias) {
        return new GetCustomer(alias.getQualifiedName(), this, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public GetCustomer rename(String name) {
        return new GetCustomer(DSL.name(name), null, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public GetCustomer rename(Name name) {
        return new GetCustomer(name, null, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public GetCustomer rename(Table<?> name) {
        return new GetCustomer(name.getQualifiedName(), null, parameters);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * Call this table-valued function
     */
    public GetCustomer call(
          String firstName
    ) {
        GetCustomer result = new GetCustomer(DSL.name("get_customer"), null, new Field[] {
            DSL.val(firstName, SQLDataType.CLOB)
        });

        return aliased() ? result.as(getUnqualifiedName()) : result;
    }

    /**
     * Call this table-valued function
     */
    public GetCustomer call(
          Field<String> firstName
    ) {
        GetCustomer result = new GetCustomer(DSL.name("get_customer"), null, new Field[] {
            firstName
        });

        return aliased() ? result.as(getUnqualifiedName()) : result;
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function2<? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function2<? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
