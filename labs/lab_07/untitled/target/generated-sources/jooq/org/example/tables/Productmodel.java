/*
 * This file is generated by jOOQ.
 */
package org.example.tables;


import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import java.util.function.Function;

import org.example.Keys;
import org.example.Public;
import org.example.tables.records.ProductmodelRecord;
import org.jooq.Check;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function17;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row17;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Productmodel extends TableImpl<ProductmodelRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.productmodel</code>
     */
    public static final Productmodel PRODUCTMODEL = new Productmodel();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProductmodelRecord> getRecordType() {
        return ProductmodelRecord.class;
    }

    /**
     * The column <code>public.productmodel.id</code>.
     */
    public final TableField<ProductmodelRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("gen_random_uuid()", SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.productmodel.category_id</code>.
     */
    public final TableField<ProductmodelRecord, UUID> CATEGORY_ID = createField(DSL.name("category_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.productmodel.name</code>.
     */
    public final TableField<ProductmodelRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.productmodel.price</code>.
     */
    public final TableField<ProductmodelRecord, BigDecimal> PRICE = createField(DSL.name("price"), SQLDataType.NUMERIC.nullable(false), this, "");

    /**
     * The column <code>public.productmodel.storage_cnt</code>.
     */
    public final TableField<ProductmodelRecord, Integer> STORAGE_CNT = createField(DSL.name("storage_cnt"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("0", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.productmodel.color</code>.
     */
    public final TableField<ProductmodelRecord, String> COLOR = createField(DSL.name("color"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.productmodel.type</code>.
     */
    public final TableField<ProductmodelRecord, UUID> TYPE = createField(DSL.name("type"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.productmodel.manufacturer</code>.
     */
    public final TableField<ProductmodelRecord, UUID> MANUFACTURER = createField(DSL.name("manufacturer"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.productmodel.body_material</code>.
     */
    public final TableField<ProductmodelRecord, UUID> BODY_MATERIAL = createField(DSL.name("body_material"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.productmodel.neck_material</code>.
     */
    public final TableField<ProductmodelRecord, UUID> NECK_MATERIAL = createField(DSL.name("neck_material"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.productmodel.sound_pickup</code>.
     */
    public final TableField<ProductmodelRecord, UUID> SOUND_PICKUP = createField(DSL.name("sound_pickup"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.productmodel.cnt_frets</code>.
     */
    public final TableField<ProductmodelRecord, Short> CNT_FRETS = createField(DSL.name("cnt_frets"), SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>public.productmodel.cnt_keys</code>.
     */
    public final TableField<ProductmodelRecord, Short> CNT_KEYS = createField(DSL.name("cnt_keys"), SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>public.productmodel.cnt_voices</code>.
     */
    public final TableField<ProductmodelRecord, Short> CNT_VOICES = createField(DSL.name("cnt_voices"), SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>public.productmodel.cnt_styles</code>.
     */
    public final TableField<ProductmodelRecord, Short> CNT_STYLES = createField(DSL.name("cnt_styles"), SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>public.productmodel.cnt_timbres</code>.
     */
    public final TableField<ProductmodelRecord, Short> CNT_TIMBRES = createField(DSL.name("cnt_timbres"), SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>public.productmodel.power</code>.
     */
    public final TableField<ProductmodelRecord, BigDecimal> POWER = createField(DSL.name("power"), SQLDataType.NUMERIC, this, "");

    private Productmodel(Name alias, Table<ProductmodelRecord> aliased) {
        this(alias, aliased, null);
    }

    private Productmodel(Name alias, Table<ProductmodelRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.productmodel</code> table reference
     */
    public Productmodel(String alias) {
        this(DSL.name(alias), PRODUCTMODEL);
    }

    /**
     * Create an aliased <code>public.productmodel</code> table reference
     */
    public Productmodel(Name alias) {
        this(alias, PRODUCTMODEL);
    }

    /**
     * Create a <code>public.productmodel</code> table reference
     */
    public Productmodel() {
        this(DSL.name("productmodel"), null);
    }

    public <O extends Record> Productmodel(Table<O> child, ForeignKey<O, ProductmodelRecord> key) {
        super(child, key, PRODUCTMODEL);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<ProductmodelRecord> getPrimaryKey() {
        return Keys.PRODUCTMODEL_PKEY;
    }

    @Override
    public List<ForeignKey<ProductmodelRecord, ?>> getReferences() {
        return Arrays.asList(Keys.PRODUCTMODEL__PRODUCTMODEL_CATEGORY_ID_FKEY, Keys.PRODUCTMODEL__PRODUCTMODEL_TYPE_FKEY, Keys.PRODUCTMODEL__PRODUCTMODEL_MANUFACTURER_FKEY, Keys.PRODUCTMODEL__PRODUCTMODEL_BODY_MATERIAL_FKEY, Keys.PRODUCTMODEL__PRODUCTMODEL_NECK_MATERIAL_FKEY, Keys.PRODUCTMODEL__PRODUCTMODEL_SOUND_PICKUP_FKEY);
    }

    private transient Category _category;
    private transient Guitarmodeltype _guitarmodeltype;
    private transient Manufacturer _manufacturer;
    private transient Material _productmodelBodyMaterialFkey;
    private transient Material _productmodelNeckMaterialFkey;
    private transient Soundpickup _soundpickup;

    /**
     * Get the implicit join path to the <code>public.category</code> table.
     */
    public Category category() {
        if (_category == null)
            _category = new Category(this, Keys.PRODUCTMODEL__PRODUCTMODEL_CATEGORY_ID_FKEY);

        return _category;
    }

    /**
     * Get the implicit join path to the <code>public.guitarmodeltype</code>
     * table.
     */
    public Guitarmodeltype guitarmodeltype() {
        if (_guitarmodeltype == null)
            _guitarmodeltype = new Guitarmodeltype(this, Keys.PRODUCTMODEL__PRODUCTMODEL_TYPE_FKEY);

        return _guitarmodeltype;
    }

    /**
     * Get the implicit join path to the <code>public.manufacturer</code> table.
     */
    public Manufacturer manufacturer() {
        if (_manufacturer == null)
            _manufacturer = new Manufacturer(this, Keys.PRODUCTMODEL__PRODUCTMODEL_MANUFACTURER_FKEY);

        return _manufacturer;
    }

    /**
     * Get the implicit join path to the <code>public.material</code> table, via
     * the <code>productmodel_body_material_fkey</code> key.
     */
    public Material productmodelBodyMaterialFkey() {
        if (_productmodelBodyMaterialFkey == null)
            _productmodelBodyMaterialFkey = new Material(this, Keys.PRODUCTMODEL__PRODUCTMODEL_BODY_MATERIAL_FKEY);

        return _productmodelBodyMaterialFkey;
    }

    /**
     * Get the implicit join path to the <code>public.material</code> table, via
     * the <code>productmodel_neck_material_fkey</code> key.
     */
    public Material productmodelNeckMaterialFkey() {
        if (_productmodelNeckMaterialFkey == null)
            _productmodelNeckMaterialFkey = new Material(this, Keys.PRODUCTMODEL__PRODUCTMODEL_NECK_MATERIAL_FKEY);

        return _productmodelNeckMaterialFkey;
    }

    /**
     * Get the implicit join path to the <code>public.soundpickup</code> table.
     */
    public Soundpickup soundpickup() {
        if (_soundpickup == null)
            _soundpickup = new Soundpickup(this, Keys.PRODUCTMODEL__PRODUCTMODEL_SOUND_PICKUP_FKEY);

        return _soundpickup;
    }

    @Override
    public List<Check<ProductmodelRecord>> getChecks() {
        return Arrays.asList(
            Internal.createCheck(this, DSL.name("productmodel_cnt_frets_check"), "(((cnt_frets >= 1) AND (cnt_frets <= 50)))", true),
            Internal.createCheck(this, DSL.name("productmodel_cnt_keys_check"), "((cnt_keys > 0))", true),
            Internal.createCheck(this, DSL.name("productmodel_cnt_styles_check"), "((cnt_styles > 0))", true),
            Internal.createCheck(this, DSL.name("productmodel_cnt_timbres_check"), "((cnt_timbres > 0))", true),
            Internal.createCheck(this, DSL.name("productmodel_cnt_voices_check"), "((cnt_voices > 0))", true),
            Internal.createCheck(this, DSL.name("productmodel_power_check"), "((power > (0)::numeric))", true),
            Internal.createCheck(this, DSL.name("productmodel_price_check"), "((price > (0)::numeric))", true)
        );
    }

    @Override
    public Productmodel as(String alias) {
        return new Productmodel(DSL.name(alias), this);
    }

    @Override
    public Productmodel as(Name alias) {
        return new Productmodel(alias, this);
    }

    @Override
    public Productmodel as(Table<?> alias) {
        return new Productmodel(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Productmodel rename(String name) {
        return new Productmodel(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Productmodel rename(Name name) {
        return new Productmodel(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Productmodel rename(Table<?> name) {
        return new Productmodel(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row17 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row17<UUID, UUID, String, BigDecimal, Integer, String, UUID, UUID, UUID, UUID, UUID, Short, Short, Short, Short, Short, BigDecimal> fieldsRow() {
        return (Row17) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function17<? super UUID, ? super UUID, ? super String, ? super BigDecimal, ? super Integer, ? super String, ? super UUID, ? super UUID, ? super UUID, ? super UUID, ? super UUID, ? super Short, ? super Short, ? super Short, ? super Short, ? super Short, ? super BigDecimal, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function17<? super UUID, ? super UUID, ? super String, ? super BigDecimal, ? super Integer, ? super String, ? super UUID, ? super UUID, ? super UUID, ? super UUID, ? super UUID, ? super Short, ? super Short, ? super Short, ? super Short, ? super Short, ? super BigDecimal, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
